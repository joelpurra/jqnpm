#!/usr/bin/env bash
set -e

if (( $(id -u) == 0 ));
then
   echo -E "jqnpm: cannot be executed with root privileges." 1>&2
   exit 1
fi

function crossplatformReadlink {
	# https://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
	# https://stackoverflow.com/a/1116890
	TARGET_FILE="$1"

	cd `dirname $TARGET_FILE`
	TARGET_FILE=`basename $TARGET_FILE`

	# Iterate down a (possible) chain of symlinks
	while [ -L "$TARGET_FILE" ]
	do
	    TARGET_FILE=`readlink $TARGET_FILE`
	    cd `dirname $TARGET_FILE`
	    TARGET_FILE=`basename $TARGET_FILE`
	done

	# Compute the canonicalized name by finding the physical path
	# for the directory we're in and appending the target file.
	PHYS_DIR=`pwd -P`
	RESULT=$PHYS_DIR/$TARGET_FILE
	echo "$RESULT"
}

# Must be executed in this file.
# Used to recursively call jqnpm and to find files to `source`.
JQNPM_SOURCE=$(crossplatformReadlink "$BASH_SOURCE")

# Helper functions
# TODO: write tests per function.
source "${JQNPM_SOURCE%/*}/shared/functions/debug.sh"
source "${JQNPM_SOURCE%/*}/shared/functions/basic.sh"
source "${JQNPM_SOURCE%/*}/shared/functions/filesystem-temp.sh"
source "${JQNPM_SOURCE%/*}/shared/functions/configuration.sh"
source "${JQNPM_SOURCE%/*}/shared/functions/git.sh"


# Metadata
source "${JQNPM_SOURCE%/*}/shared/metadata/package-root.sh"
source "${JQNPM_SOURCE%/*}/shared/metadata/jq.json.sh"
source "${JQNPM_SOURCE%/*}/shared/metadata/main.jq.sh"
source "${JQNPM_SOURCE%/*}/shared/metadata/validation.sh"
source "${JQNPM_SOURCE%/*}/shared/metadata/read.sh"
source "${JQNPM_SOURCE%/*}/shared/metadata/update.sh"


# Workarounds
# TODO: remove when jq is confirmed to fully support whatever workarounds there are.
source "${JQNPM_SOURCE%/*}/shared/functions/workarounds-jq.sh"


# Actions
# TODO: implement other actions.
# TODO: write tests per function.
source "${JQNPM_SOURCE%/*}/shared/actions/help.sh"
source "${JQNPM_SOURCE%/*}/shared/actions/initialize.sh"
source "${JQNPM_SOURCE%/*}/shared/actions/fetch.sh"
source "${JQNPM_SOURCE%/*}/shared/actions/install.sh"
source "${JQNPM_SOURCE%/*}/shared/actions/execute.sh"
source "${JQNPM_SOURCE%/*}/shared/actions/generate.sh"


### Always executed

function main {
	# TODO: implement other actions.
	local action="$1"
	(( "$#" > 0 )) && shift

	# TODO: use a system like "exec jqnpm-$action.sh".
	case "$action" in
		'fetch')
			fetch "$@"
			;;
		'install')
			install "$@"
			;;
		'initialize'|'init')
			initialize "$@"
			;;
		'execute'|'exec')
			execute "$@"
			;;
		'generate')
			generate "$@"
			;;
		'help')
			help "$@"
			;;
		*)
			help "$@"
			;;
	esac
}

function initJqnpm {
	[[ -z $(which jq) ]] && die 1 "jq is required."
	jq --null-input --join-output -L '.' '"x"' &>/dev/null || die 1 "A newer jq with module support (etcetera) is required."

	# TODO: check for `git` with support for `git clone --branch <tag> --single-branch --depth 1`.
	[[ -z $(which git) ]] && die 1 "git is required."

	packageMetadataFilename="jq.json"
	packageMetadataDirectoryName=".jq"
	localJqPackageBase="${packageMetadataDirectoryName}/packages"
	globalJqPackageBase="${HOME}/${localJqPackageBase}"
	defaultPackageJqFile="jq/main.jq"
}

# End functions, start execution.
initJqnpm "$@";
main "$@";
