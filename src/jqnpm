#!/usr/bin/env bash
set -e


### Error handling

function isDebugAtLevel {
	(( "$#" < 1 )) && die 100 "not the right number of arguments to '$FUNCNAME'"
	local -i messageLevel="$1"
	shift

	# TODO: output debug message level.
	# 0 fatal
	# 1 errors
	# 2 warnings
	# 3 information
	# 4 debug
	# 5 verbose

	if (( ${JQNPM_DEBUG_LEVEL:-2} >= $messageLevel ));
	then
		return 0;
	fi

	return 1;
}

function debug {
	(( "$#" < 2 )) && die 100 "not the right number of arguments to '$FUNCNAME'"
	local -i messageLevel="$1"
	shift

	isDebugAtLevel "$messageLevel" && echo -E "jqnpm:" "$@" >&2

	return 0;
}

function debugInPackageIfAvailable {
	(( "$#" < 2 )) && die 100 "not the right number of arguments to '$FUNCNAME'"
	local -i messageLevel="$1"
	shift

	if hasPackageMetadataFile;
	then
		debugInPackage "$messageLevel" "[$(getPackageName)]" "$@"
	else
		debug "$messageLevel" "$@"
	fi

	return 0;
}

function debugInPackage {
	(( "$#" < 2 )) && die 100 "not the right number of arguments to '$FUNCNAME'"
	local -i messageLevel="$1"
	shift

	debug "$messageLevel" "[$(getPackageName)]" "$@"

	return 0;
}

function die {
	(( "$#" < 2 )) && die 100 "not the right number of arguments to '$FUNCNAME'"
	local -i exitcode="$1"
	shift

	debug 0 "$@"
	exit "$exitcode"
}


### Basic functionality

# Join an array as delimited string.
# http://stackoverflow.com/a/17841619
function join { local IFS="$1"; shift; echo -E "$*"; }

# TODO: re-use these TMP functions across files.
function createTempFileDirectoryIfNecessary {
	if [[ ! -d "$internalTmpDir" ]];
	then
		local base=$(basename "$BASH_SOURCE")

		internalTmpDir=$(mktemp -d "${TMPDIR:-TMP}${base}.XXXXXX")
	fi
}

function rmTempFileDirectory {
	if [[ ! -z "${internalTmpDir}" && -d "${internalTmpDir}" ]];
	then
		rm -rf "${internalTmpDir}"
	fi
}

# TODO: is this EXIT trap interfering with shunit2 testing traps?
trap 'rmTempFileDirectory' EXIT

function getTempFilePath {
	createTempFileDirectoryIfNecessary

	local tmpPath="$(mktemp "${internalTmpDir}/tmp.XXXXXX")"

	echo -nE "$tmpPath"
}
# END TMP functions.


### Metadata handling

function hasPackageMetadataFile {
	if [[ -s "$packageMetadataFilename" ]];
	then
		return 0;
	fi

	return 1;
}

function hasPackageMainJq {
	if [[ -s "$defaultPackageJqFile" ]];
	then
		return 0;
	fi

	return 1;
}

function requiresJqJson {
	hasPackageMetadataFile || die 1 "missing '${packageMetadataFilename}'."
}

function replaceHomeWithTilde {
	local fixedHome="${HOME//|/\|}"

	sed "s|$fixedHome|~|g"
}

function currentMetadata {
	cat "$packageMetadataFilename"
}

function getDirectDependencyNames {
	# TODO: encode output with '@sh'?
	currentMetadata | jq --join-output 'def delim: [ 00 ] | implode; (if .dependencies then (.dependencies | keys | (join(delim) + delim)) else empty end)'
}

function getPackageName {
	# TODO: encode output with '@sh'?
	currentMetadata | jq --join-output '.name'
}

function getDirectDependencyVersion {
	(( "$#" < 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	local dependencyName="$1"
	shift

	# TODO: encode output with '@sh'?
	currentMetadata | jq --join-output --arg dependencyName "$dependencyName" '.dependencies[$dependencyName]'
}

function hasDirectDependencies {
	# TODO: this array handling feels hacky.
	# http://mywiki.wooledge.org/BashFAQ/020
	unset directDependencyNames i
	while IFS= read -r -d '' dependencyName; do
		directDependencyNames[i++]="$dependencyName"
	done < <(getDirectDependencyNames)

	[[ -z "$directDependencyNames" ]] && return 1;

	local numberOfDirectDependencyNames="${#directDependencyNames[@]}"
	(( numberOfDirectDependencyNames == 0 )) && return 1;

	return 0;
}

# TODO: use "real" versions for jq and jqnpm.
read -d '' defaultMinmalJqJson <<-'EOF' || true
{
    "name": "TO BE REPLACED",
    "version": "0.1.0",
    "main": "./src/main.jq",
    "dependencies": {},
    "engines": {
        "jq": "^1.5.0",
        "jqnpm": "^1.0.0"
    }
}
EOF

function createEmptyJqJsonIfNecessary {
	if ! hasPackageMetadataFile;
	then
		local packageName=$(basename "$PWD")
		echo -nE "$defaultMinmalJqJson" | jq --arg "packageName" "$packageName" '.name=$packageName' > "$packageMetadataFilename"
	fi
}

function createEmptyMainJqIfNecessary {
	if ! hasPackageMainJq;
	then
		mkdir -p "$(dirname "$defaultPackageJqFile")"
		echo -E "# Write your jq code here!" >"$defaultPackageJqFile"
	fi
}

read -d '' addOrUpdateDependencyInJqJson <<-'EOF' || true
if (.dependencies | not)
then
	.dependencies = {}
else
	.
end
| .dependencies[$depName] = $depSemverRange
EOF

function addOrUpdateDependencyAndRangePairInJqJson {
	(( "$#" < 2 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	local dependencyName="$1"
	shift
	local dependencySemverRange="$1"
	shift
	local tmpFilePath=$(getTempFilePath)

	createEmptyJqJsonIfNecessary

	<"$packageMetadataFilename" jq --arg depName "$dependencyName" --arg depSemverRange "$dependencySemverRange" "$addOrUpdateDependencyInJqJson" >"$tmpFilePath"
	cp "$tmpFilePath" "$packageMetadataFilename"
	rm "$tmpFilePath"
}

function addOrUpdateDependencyAndRangeInJqJson {
	(( "$#" != 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	IFS='@' read -ra nameAndVersion <<< "$1"
	shift

	local dependencyName="${nameAndVersion[0]}"
	local dependencySemverRange="${nameAndVersion[1]}"

	debugInPackageIfAvailable 4 "(adding/updating in jq.json) dependency '${dependencyName}'@'${dependencySemverRange}'"

	addOrUpdateDependencyAndRangePairInJqJson "$dependencyName" "$dependencySemverRange"
}


#### Actions

function help {
	(( "$#" != 0 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	echo "jqnpm: npm style package manager for jq"
	echo "https://github.com/joelpurra/jqnpm"
	echo
	echo "jqnpm <action> [options]"
	echo
	echo "Actions"
	echo "  help                      Show this help."
	echo "  initialize                Create default jq.json and src/main.jq files."
	echo "  fetch [package]           Preload package cache from remote server."
	echo "  install [package]         Install/add jq.json dependencies to the current directory."
	echo "  execute [flags for jq]    Run normal jq with dependencies. **This is a workaround until plain jq is up to speed.**"
}

function fetchSingle {
	(( "$#" != 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	IFS='@' read -ra nameAndVersion <<< "$1"
	shift

	local dependencyName="${nameAndVersion[0]}"
	local dependencySemverRange="${nameAndVersion[1]}"

	debugInPackageIfAvailable 4 "(fetching) dependency '${dependencyName}'@'${dependencySemverRange}'"

	# TODO: use a local folder per remote server, /github.com/?
	# TODO: make building remote and cache variables functions.
	local remote="${JQNPM_REMOTE_BASE:-$config_default_remoteBase}/${dependencyName}${JQNPM_REMOTE_SUFFIX:-$config_default_remoteSuffix}"
	local cache="${JQNPM_PACKAGES_CACHE:-$config_default_packagesCache}/${dependencyName}"

	if [[ ! -d "$cache" ]];
	then
		mkdir -p "$cache"
	fi

	# TODO: get list of local tags, match against it.
	# TODO: get a list of remote tags.
	# TODO: only download the best-matching tag, not the entire repository.
	# TODO: use --bare repos, bundles or maybe zip files in cache?
	# git clone --branch <tag> --single-branch --depth 1 "$remote" "$cache"
	# TODO: fail gracefully if git fails.
	debugInPackageIfAvailable 3 $(echo -E "Cloning '${remote}' to '${cache}'" | replaceHomeWithTilde)
	git clone --single-branch --depth 1 --quiet "$remote" "$cache"
}

function fetchSingleManually {
	(( "$#" != 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	debugInPackageIfAvailable 4 "(fetching manually) ${1}"

	fetchSingle "$1"
}

function fetchFromJqJson {
	(( "$#" != 0 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	# TODO: enable arguments controlling what is being fetched.
	# For now, assume jq.json is being used, or die.
	requiresJqJson

	# Reads jq.json, clone remote repos to ./jq/packages/username/reponame
	# This continues recursively.	

	# TODO: this array handling feels hacky.
	# http://mywiki.wooledge.org/BashFAQ/020
	unset directDependencyNames i
	while IFS= read -r -d '' dependencyName; do
		directDependencyNames[i++]="$dependencyName"
	done < <(getDirectDependencyNames)

	debugInPackage 4 "(preparing fetch) numberOfDirectDependencyNames: ${numberOfDirectDependencyNames} directDependencyNames: '${directDependencyNames[@]}'"

	hasDirectDependencies || return 0;

	for dependencyName in "${directDependencyNames[@]}";
	do
		# TODO: use the semantic version and match against remote repo git tags.
		local dependencySemverRange=$(getDirectDependencyVersion "$dependencyName")

		fetchSingle "${dependencyName}@${dependencySemverRange}"

		local cache="${JQNPM_PACKAGES_CACHE:-$config_default_packagesCache}/${dependencyName}"

		# Fetch recursively.
		pushd "$cache" >/dev/null
		"$BASH_SOURCE" fetch
		popd >/dev/null
	done
}

function fetch {
	(( "$#" > 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	if [[ -z "$1" ]];
	then
		fetchFromJqJson
	else
		fetchSingleManually "$1"
	fi
}

function installSingle {
	(( "$#" != 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	IFS='@' read -ra nameAndVersion <<< "$1"
	shift

	local dependencyName="${nameAndVersion[0]}"
	local dependencySemverRange="${nameAndVersion[1]}"

	# Make sure the remote repository is in the local cache.
	# TODO: implement --no-fetch.
	"$BASH_SOURCE" fetch "${dependencyName}@${dependencySemverRange}"

	debugInPackageIfAvailable 4 "(installing) dependency '${dependencyName}'@'${dependencySemverRange}'"

	local cache="${JQNPM_PACKAGES_CACHE:-$config_default_packagesCache}/${dependencyName}"
	local localDependencyPath="${PWD}/${localJqPackageBase}/${dependencyName}"

	mkdir -p "$localDependencyPath"

	# Use `git archive` to copy git content instead of the repository.
	pushd "$cache" >/dev/null
	# TODO: use the right tag.
	git archive HEAD | tar x -C "$localDependencyPath"
	popd >/dev/null
}

function installSingleManually {
	(( "$#" != 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	debugInPackageIfAvailable 4 "(installing manually) ${1}"

	installSingle "$1"

	# TODO: if semver range is empty, extract most recent dependency version, use it as the single '=1.2.3' range when saving.
	addOrUpdateDependencyAndRangeInJqJson "$1"
}

function installFromJqJson {
	(( "$#" != 0 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	# TODO: enable arguments controlling what is being installed.
	# For now, assume jq.json is being used, or die.
	requiresJqJson

	# Reads jq.json, puts files in ./jq/packages/
	# ./jq/packages/$dependencyName/
	# ./jq/packages/$dependencyName/src/whatever/
	# Then reads ./jq/packages/$dependencyName/jq.json, and installs $subdependencies.
	# ./jq/packages/$dependencyName/.jq/packages/$subdependency/
	# This continues recursively.	
	# TODO: build a dependency graph to detect circular dependencies.

	# TODO: this array handling feels hacky.
	# http://mywiki.wooledge.org/BashFAQ/020
	unset directDependencyNames i
	while IFS= read -r -d '' dependencyName; do
		directDependencyNames[i++]="$dependencyName"
	done < <(getDirectDependencyNames)

	debugInPackage 4 "(preparing install) numberOfDirectDependencyNames: ${numberOfDirectDependencyNames} directDependencyNames: '${directDependencyNames[@]}'"

	hasDirectDependencies || return 0;

	for dependencyName in "${directDependencyNames[@]}";
	do
		# TODO: use the semantic version and match against remote repo git tags.
		local dependencySemverRange=$(getDirectDependencyVersion "$dependencyName")

		installSingle "${dependencyName}@${dependencySemverRange}"

		local localDependencyPath="${PWD}/${localJqPackageBase}/${dependencyName}"

		# Install recursively.
		pushd "$localDependencyPath" >/dev/null
		"$BASH_SOURCE" install
		popd >/dev/null
	done
}

function install {
	(( "$#" > 1 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	if [[ -z "$1" ]];
	then
		installFromJqJson
	else
		installSingleManually "$1"
	fi
}

function initialize {
	(( "$#" != 0 )) && die 1 "not the right number of arguments to '$FUNCNAME'"
	createEmptyJqJsonIfNecessary
	createEmptyMainJqIfNecessary
}

# TODO: remove execute capabilities once jq is up to speed with the package import algorithm.
# One should not have to use `jqnpm execute` when `jq` is enough.
# https://github.com/joelpurra/jqnpm/blob/master/CONTRIBUTE.md#requirements-for-the-jq-binary
function execute {
	if hasPackageMetadataFile && isDebugAtLevel 4;
	then
		# TODO: this array handling feels hacky.
		# http://mywiki.wooledge.org/BashFAQ/020
		unset directDependencyNames i
		while IFS= read -r -d '' dependencyName; do
			directDependencyNames[i++]="$dependencyName"
		done < <(getDirectDependencyNames)

		local numberOfDirectDependencyNames="${#directDependencyNames[@]}"

		debugInPackageIfAvailable 4 "(preparing execute) numberOfDirectDependencyNames: ${numberOfDirectDependencyNames} directDependencyNames: '${directDependencyNames[@]}'"
	fi

	if hasPackageMetadataFile && hasDirectDependencies;
	then
		# TODO: lookup jq.json's "main" property for the path.
		local packageJqFile="$defaultPackageJqFile"

		if hasDirectDependencies;
		then
			# TODO: don't *completely* redefine the orginal library path?
			# The default contains useful, and therefore possibly widespread, defaults.
			# The defaults are also system-dependent.
			jq -L "${localJqPackageBase}" -f "${PWD}/${packageJqFile}" "$@"
		else
			if [[ -s "$packageJqFile" ]];
			then
				jq -f "${PWD}/${packageJqFile}" "$@"
			else
				jq "$@"
			fi
		fi
	else
		if hasPackageMainJq;
		then
			jq -f "${PWD}/${defaultPackageJqFile}" "$@"
		else
			jq "$@"
		fi
	fi
}


### Always executed

function main {
	# TODO: implement other actions.
	local action="$1"
	(( "$#" > 0 )) && shift

	# TODO: use a system like "exec jqnpm-$action.sh".
	case "$action" in
		'fetch')
			fetch "$@"
			;;
		'install')
			install "$@"
			;;
		'initialize'|'init')
			initialize "$@"
			;;
		'execute'|'exec')
			execute "$@"
			;;
		'help')
			help "$@"
			;;
		*)
			help "$@"
			;;
	esac
}

function initJqnpm {
	[[ -z $(which jq) ]] && die 1 "jq is required."
	jq --null-input --join-output -L '.' '"x"' &>/dev/null || die 1 "A newer jq with module support (etcetera) is required."

	# TODO: check for `git` with support for `git clone --branch <tag> --single-branch --depth 1`.
	[[ -z $(which git) ]] && die 1 "git is required."

	# TODO: normalize configuration, configuration defaults and internal variable names.
	config_default_remoteBase="git://github.com"
	config_default_remoteSuffix=".git"
	config_default_packagesCache="$HOME/.jq/packages"

	packageMetadataFilename="jq.json"
	localJqPackageBase="./.jq/packages"
	defaultPackageJqFile="src/main.jq"
}

initJqnpm "$@";
main "$@";
