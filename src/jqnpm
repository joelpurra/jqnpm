#!/usr/bin/env bash
set -e


### Error handling

function isDebugAtLevel {
	local -i messageLevel="${1:-0}"
	shift

	# TODO: output debug message level.
	# 0 fatal
	# 1 errors
	# 2 warnings
	# 3 information
	# 4 debug
	# 5 verbose

	if (( ${JQNPM_DEBUG_LEVEL:-2} >= $messageLevel ));
	then
		return 0;
	fi

	return 1;
}

function debug {
	local -i messageLevel="${1:-0}"
	shift

	isDebugAtLevel "$messageLevel" && echo -E "jqnpm:" "$@" >&2

	return 0;
}

function debugInPackage {
	local -i messageLevel="${1:-0}"
	shift

	debug "$messageLevel" "[$(getPackageName)]" "$@"

	return 0;
}

function die {
	local -i exitcode="${1:-1}"
	shift

	debug 0 "$@"
	exit "$exitcode"
}


### Basic functionality

# Join an array as delimited string.
# http://stackoverflow.com/a/17841619
function join { local IFS="$1"; shift; echo "$*"; }


### Metadata handling

function hasPackageMetadataFile {
	if [[ -s "$packageMetadataFilename" ]];
	then
		return 0;
	fi

	return 1;
}

function requiresJqJson {
	hasPackageMetadataFile || die 1 "missing '${packageMetadataFilename}'."
}

function replaceHomeWithTilde {
	local fixedHome="${HOME//|/\|}"

	sed "s|$fixedHome|~|g"
}

function currentMetadata {
	cat "$packageMetadataFilename"
}

function getDirectDependencyNames {
	# TODO: encode output with '@sh'?
	currentMetadata | jq --join-output 'def delim: [ 00 ] | implode; (if .dependencies then (.dependencies | keys | (join(delim) + delim)) else empty end)'
}

function getPackageName {
	# TODO: encode output with '@sh'?
	currentMetadata | jq --join-output '.name'
}

function getDirectDependencyVersion {
	local dependencyName="$1"

	# TODO: encode output with '@sh'?
	currentMetadata | jq --join-output --arg dependencyName "$dependencyName" '.dependencies[$dependencyName]'
}

function hasDirectDependencies {
	# TODO: this array handling feels hacky.
	# http://mywiki.wooledge.org/BashFAQ/020
	unset directDependencyNames i
	while IFS= read -r -d '' dependencyName; do
		directDependencyNames[i++]="$dependencyName"
	done < <(getDirectDependencyNames)

	[[ -z "$directDependencyNames" ]] && return 1;

	local numberOfDirectDependencyNames="${#directDependencyNames[@]}"
	(( numberOfDirectDependencyNames == 0 )) && return 1;

	return 0;
}


#### Actions

function help {
	echo "jqnpm: npm style package manager for jq"
	echo "https://github.com/joelpurra/jqnpm"
	echo
	echo "jqnpm <action>"
	echo
	echo "Actions"
	echo "  help        Show this help."
	echo "  fetch       Preload from remote base."
	echo "  install     Install from the current directory."
	echo "  execute     Run the current jq project."
}

function fetchSingle {
	local dependencyName="$1"
	shift

	# TODO: use the semantic version and match against remote repo git tags.
	dependencySemverRange=$(getDirectDependencyVersion "$dependencyName")

	debugInPackage 4 "(installing) dependencyName '${dependencyName}'@'${dependencySemverRange}'"

	# TODO: use a local folder per remote server, /github.com/?
	# TODO REMOVE: using git bundles for now; use only for testing later.
	local remote="${JQNPM_REMOTE_BASE:-config_default_remoteBase}/${dependencyName}.bundle"
	local cache="${JQNPM_PACKAGES_CACHE:-config_default_packagesCache}/${dependencyName}"

	if [[ ! -d "$cache" ]];
	then
		mkdir -p "$cache"
	fi

	# TODO: get list of local tags, match against it.
	# TODO: get a list of remote tags.
	# TODO: only download the best-matching tag, not the entire repository.
	# TODO: use --bare repos, bundles or maybe zip files in cache?
	# git clone --branch <tag> --single-branch --depth 1 "$remote" "$cache"
	# TODO: fail gracefully if git fails.
	debugInPackage 3 $(echo "Cloning '${remote}' to '${cache}'" | replaceHomeWithTilde)
	git clone --single-branch --depth 1 --quiet "$remote" "$cache"
}

function fetch {
	# TODO: enable arguments controlling what is being fetched.
	# For now, assume jq.json is being used, or die.
	requiresJqJson

	# Reads jq.json, clone remote repos to ./jq/packages/username/reponame
	# This continues recursively.	

	# TODO: this array handling feels hacky.
	# http://mywiki.wooledge.org/BashFAQ/020
	unset directDependencyNames i
	while IFS= read -r -d '' dependencyName; do
		directDependencyNames[i++]="$dependencyName"
	done < <(getDirectDependencyNames)

	debugInPackage 4 "(preparing fetch) numberOfDirectDependencyNames: ${numberOfDirectDependencyNames} directDependencyNames: '${directDependencyNames[@]}'"

	hasDirectDependencies || return 0;

	for dependencyName in "${directDependencyNames[@]}";
	do
		fetchSingle "$dependencyName"

		local cache="${JQNPM_PACKAGES_CACHE:-config_default_packagesCache}/${dependencyName}"

		# Fetch recursively.
		pushd "$cache" >/dev/null
		"$BASH_SOURCE" fetch
		popd >/dev/null
	done
}

function installSingle {
	local dependencyName="$1"
	shift

	# TODO: use the semantic version and match against remote repo git tags.
	dependencySemverRange=$(getDirectDependencyVersion "$dependencyName")

	debugInPackage 4 "(installing) dependencyName '${dependencyName}'@'${dependencySemverRange}'"

	local cache="${JQNPM_PACKAGES_CACHE:-config_default_packagesCache}/${dependencyName}"
	local localDependencyPath="$PWD/${localJqPackageBase}/${dependencyName}"

	mkdir -p "$localDependencyPath"

	# Use `git archive` to copy git content instead of the repository.
	pushd "$cache" >/dev/null
	# TODO: use the right tag.
	git archive HEAD | tar x -C "$localDependencyPath"
	popd >/dev/null
}

function install {
	# TODO: enable arguments controlling what is being installed.
	# For now, assume jq.json is being used, or die.
	requiresJqJson

	# Reads jq.json, puts files in ./jq/packages/
	# ./jq/packages/$dependencyName/
	# ./jq/packages/$dependencyName/src/whatever/
	# Then reads ./jq/packages/$dependencyName/jq.json, and installs $subdependencies.
	# ./jq/packages/$dependencyName/.jq/packages/$subdependency/
	# This continues recursively.	
	# TODO: build a dependency graph to detect circular dependencies.

	# TODO: this array handling feels hacky.
	# http://mywiki.wooledge.org/BashFAQ/020
	unset directDependencyNames i
	while IFS= read -r -d '' dependencyName; do
		directDependencyNames[i++]="$dependencyName"
	done < <(getDirectDependencyNames)

	debugInPackage 4 "(preparing install) numberOfDirectDependencyNames: ${numberOfDirectDependencyNames} directDependencyNames: '${directDependencyNames[@]}'"

	hasDirectDependencies || return 0;

	# Make sure the remote repository is in the local cache.
	# TODO: fetch only $dependencyName.
	# TODO: implement --no-fetch.
	"$BASH_SOURCE" fetch

	for dependencyName in "${directDependencyNames[@]}";
	do
		installSingle "$dependencyName"

		local localDependencyPath="$PWD/${localJqPackageBase}/${dependencyName}"

		# Install recursively.
		pushd "$localDependencyPath" >/dev/null
		"$BASH_SOURCE" install
		popd >/dev/null
	done
}

function execute {
	# For now, assume jq.json is being used, or die.
	requiresJqJson

	# TODO: lookup jq.json's "main" property for the path.
	# TODO: check if the file exists.
	local packageJqFile="$defaultPackageJqFile"

	if isDebugAtLevel 4;
	then
		# TODO: this array handling feels hacky.
		# http://mywiki.wooledge.org/BashFAQ/020
		unset directDependencyNames i
		while IFS= read -r -d '' dependencyName; do
			directDependencyNames[i++]="$dependencyName"
		done < <(getDirectDependencyNames)

		local numberOfDirectDependencyNames="${#directDependencyNames[@]}"

		debugInPackage 4 "(preparing execute) numberOfDirectDependencyNames: ${numberOfDirectDependencyNames} directDependencyNames: '${directDependencyNames[@]}'"
	fi

	if hasDirectDependencies;
	then
		# TODO: don't *completely* redefine the orginal library path?
		# The default contains useful, and therefore possibly widespread, defaults.
		# The defaults are also system-dependent.
		jq -L "${localJqPackageBase}" -f "${PWD}/${packageJqFile}" "$@"
	else
		jq -f "${PWD}/${packageJqFile}" "$@"
	fi
}


### Always executed

function main {
	# TODO: implement other actions.
	local action="$1"
	shift

	# TODO: use a system like "exec jqnpm-$action.sh".
	case "$action" in
		'fetch')
			fetch "$@"
			;;
		'install')
			install "$@"
			;;
		'execute'|'exec')
			execute "$@"
			;;
		'help')
			help "$@"
			;;
		*)
			help "$@"
			;;
	esac
}

function init {
	# TODO: check for `jq` with support for modules/packages.
	[[ -z $(which jq) ]] && die 1 "jq is required."

	# TODO: check for `git` with support for `git clone --branch <tag> --single-branch --depth 1`.
	[[ -z $(which git) ]] && die 1 "git is required."

	config_default_remoteBase="https://github.com"
	config_default_packagesCache="$HOME/.jq/packages"

	packageMetadataFilename="jq.json"
	localJqPackageBase="./.jq/packages"
	defaultPackageJqFile="src/main.jq"
}

init "$@";
main "$@";
